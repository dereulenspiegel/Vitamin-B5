<?xml version="1.0" encoding="UTF-8"?>
<project name="Vitamin B5 Test" default="help">
	
	<!-- <property name="jar.libs.ref" value="../ActionBarSherlockLibrary/, ../gesture-imageview/"/>-->
	
	<path id="jar.libs.ref">
		<pathelement location="../ActionBarSherlockLibrary/bin/actionbarsherlocklibrary"/>
		<pathelement location="../gesture-imageview/bin/"/>
	</path>

	<!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
	<property file="local.properties" />

	<!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
	<property file="ant.properties" />

	<!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
	<loadproperties srcFile="project.properties" />

	<!-- quick check on sdk.dir -->
	<fail message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var" unless="sdk.dir" />


	<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
	<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

	<!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->

	<!-- version-tag: 1 -->
	
	<import file="${sdk.dir}/tools/ant/build.xml" />

	<target name="test" depends="-test-project-check" description="Runs tests from the package defined in test.package property">

		<property name="tested.project.absolute.dir" location="${tested.project.dir}" />

		<property name="test.runner" value="android.test.InstrumentationTestRunner" />

		<!-- Application package of the tested project extracted from its manifest file -->
		<xpath input="${tested.project.absolute.dir}/AndroidManifest.xml" expression="/manifest/@package" output="tested.manifest.package" />
		<xpath input="AndroidManifest.xml" expression="/manifest/@package" output="manifest.package" />

		<property name="emma.dump.file" value="/data/data/${tested.manifest.package}/coverage.ec" />

		<if condition="${emma.enabled}">
			<then>
				<echo>WARNING: Code Coverage is currently only supported on the emulator and rooted devices.</echo>
				<run-tests-helper emma.enabled="true">
					<extra-instrument-args>
						<arg value="-e" />
						<arg value="coverageFile" />
						<arg value="${emma.dump.file}" />
					</extra-instrument-args>
				</run-tests-helper>
				<echo>Downloading coverage file into project directory...</echo>
				<exec executable="${adb}" failonerror="true">
					<arg line="${adb.device.arg}" />
					<arg value="pull" />
					<arg value="${emma.dump.file}" />
					<arg value="coverage.ec" />
				</exec>
				<echo>Extracting coverage report...</echo>
				<emma>
					<report sourcepath="${tested.project.absolute.dir}/${source.dir}" verbosity="${verbosity}">
						<!-- TODO: report.dir or something like should be introduced if necessary -->
						<infileset dir=".">
							<include name="coverage.ec" />
							<include name="coverage.em" />
						</infileset>
						<!-- TODO: reports in other, indicated by user formats -->
						<html outfile="coverage.html" />
						<xml outfile="coverage.xml" />
					</report>
				</emma>
				<echo>Cleaning up temporary files...</echo>
				<delete file="coverage.ec" />
				<delete file="coverage.em" />
				<echo>Saving the report file in ${basedir}/coverage/coverage.html</echo>
				<echo>Saving the report file in ${basedir}/coverage/coverage.xml</echo>
			</then>
			<else>
				<run-tests-helper />
			</else>
		</if>
	</target>

	<macrodef name="dex-helper">
		<element name="external-libs" optional="yes" />
		<attribute name="nolocals" default="false" />
		<sequential>
			<!-- sets the primary input for dex. If a pre-dex task sets it to
	                 something else this has no effect -->
			<property name="out.dex.input.absolute.dir" value="${out.classes.absolute.dir}" />
			<!-- set the secondary dx input: the project (and library) jar files
	                 If a pre-dex task sets it to something else this has no effect -->
			<if>
				<condition>
					<isreference refid="out.dex.jar.input.ref" />
				</condition>
				<else>
					<!--
	                        out.dex.jar.input.ref is not set. Compile the list of jars to dex.
	                        For test projects, only dex jar files included in the project
	                        path
	                    -->
					<if condition="${project.is.test}">
						<then>
							<!-- test project -->
							<pathconvert pathsep="," refid="jar.libs.ref" property="jars_to_dex_pattern" />
							<path id="out.dex.jar.input.ref">
								<files includes="${jars_to_dex_pattern}">
									<!-- only include jar files actually in the test project -->
									<filename name="${basedir}/**/*" />
								</files>
							</path>
							<property name="in_jars_to_dex" refid="jar.libs.ref" />
							<property name="out_jars_to_dex" refid="out.dex.jar.input.ref" />
							<echo message="Test project! Reducing jars to dex from ${in_jars_to_dex} to ${out_jars_to_dex}." />
						</then>
						<else>
							<path id="out.dex.jar.input.ref" />
						</else>
					</if>
				</else>
			</if>
			<dex executable="${dx}" output="${intermediate.dex.file}" nolocals="@{nolocals}" verbose="${verbose}">
				<path path="${out.dex.input.absolute.dir}" />
				<path refid="out.dex.jar.input.ref" />
				<external-libs />
			</dex>
		</sequential>
	</macrodef>

	<target name="pull-test-result">
		<exec executable="${adb}" failonerror="true" dir="junit-results">
			<arg line="${adb.device.arg}" />
			<arg value="pull" />
			<arg value="/data/data/${tested.manifest.package}/files/" />
		</exec>
	</target>

</project>
